
import pandas as pd
import numpy as np
import seaborn as sns
sns.set(roq'figure.figsize':(11.7,8.27)))
cars_data=pd.read_csv('cars_sampled.csv')
cars=cars_data.copy()
cars.info()
cars.describe()
pd.set_option( 'display.float_format', lambda x: be al % x)
cars.describe()
pd.set_option('display.max columns', 500)
cars.describe()
col=['name', 'dateCrawled' , 'dateCreated', 'postalCode' ,'lastSeen']
cars=cars.drop(columns=col, axis=1)
cars.drop_duplicates(keep='first',inplace=True)
cars.isnull().sum()
yearwise_count=cars['yearOfRegistration'].value_counts().sort_index()
 sum(cars['yearOfRegistration'] > 2018)

sum(cars[ 'yearOfRegistration'] < 1950)

sns .regplot(x='yearOfRegistration', y='price', scatter=True,fit_reg=False,data=cars)
price_count=cars['price'].value_counts().sort_index()
}sns.distplot(cars['price'])

cars['price'].describe()

sns. boxplot(y=cars[ 'price' ])

sum(cars['price'] > 150000)

sum(cars['price'] < 100)
power _count=cars[ 'powerPS' ].value_counts().sort_index()
sns.distplot(cars[ 'powerPS'])

cars['powerPS'].describe()

sns.boxplot(y=cars[ 'powerPS' })
sns.regplot(x='powerPS', y='price', scatter=True,fit_reg=False, data=cars)

sum(cars[ 'powerPS'] > 500)

sum(cars[ 'powerPS'] < 10)
cars = cars[
(cars.yearOfRegistration <= 2618) h
& (cars.yearOfRegistration >= 195@)
& (cars.price >= 100)
& (cars.price <= 150000)
& (cars.powerPS >= 10)
& (cars.powerPS <= 50@)]

cars['monthOfRegistration']/=12

cars[ 'Age']=(2018-cars[ 'yearOfRegistration'])+cars[ 'monthOfRegistration')
cars['Age' }=round(cars{ 'Age' ],2)

cars[ 'Age' ].describe()


cars=cars.drop(coluans=['yearOfRegistration', 'monthOfRegistration'], axis=1)

sns.distplot(cars[ 'Age' ])
sns.boxplot(y=cars['Age'])



sns.distplot(cars{ 'price' ])
sns.boxplot(y=cars{ 'price' ])


sns.distplot(cars[ 'powerpS' ])
sns.boxplot(y=cars[ 'price' ])



sns.regplot(x='Age', y='price', scatter=True,fit_regeFalse, data=cars)


cars[ 'seller' ].value_counts()

pd.crosstab(cars['seller'],columns= "count ' normalize=True)


cars['offerType'].value_counts()

sns.countplot (x='offerType' ,datascars)

cars['abtest'].value_counts()

pd.crosstab(cars[ ‘abtest’],columns= ‘count’ normalize=True)




cars[ 'vehicleType’].value_counts()

pd.crosstab(cars[ 'vehicleType'],columns='count’ ,normalize=True)

cars[ 'vehicleType'].value_counts()

pd.crosstab(cars[ 'vehicleType'],columns='count' ,normalize=True)
pd.crosstab(cars[ 'notRepairedQamage'],columns='count' ,normalize=True)
sns.countplot(x='notRepairedDamage',data=cars)

sns.boxplot(x='notRepairedDamage',y='price',datascars)
cars=cars.drop(columns=col, axis=1)
cars_copy=cars.copy()
cars_selecti=cars.select_dtypes(exclude=[object])
correlation=cars_select1.corr()
round(correlation, 3)
cars_select1.core().loc[:,'price'].abs().sort_values(ascending=False)[1:]
cars_omit=pd.get_dummies(cars_omit,drop_first=True)

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
Separating input and output features
x1 = cars_omit.drop([‘price'], axis='columns', inplace=False)
yl = cars_omit['price’]
prices = pd.DataFrame({“1. Before”:yl, “2. After”:np.log(y1)})
prices. hist()
yl = np.log(y)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)
base_pred = np.mean(y_test)
print (base_pred)
eae = np.repeat(base_pred, len(y test))
base_root_mean_square_error = np. sqrt (mean_squered_error(y_test, base_pred))
print (base_root_mean_square_error)
Igr=LinearRegression(fit_intercept=True)
model_lini=lgr.fit(X_train,y train)
cars_predictions_linl = lgr.predict(x_test)
lin_msel = mean_squared_error(y test, cars_predictions_lin1)
Lin_emsel = np.sqrt(lin_mse1)
print(lin_rasel)
r2_lin_testi=model_lin1.score(X_test,y_test)
r2_lin_traini=model_lini.score(X_train,y train)
residualsicy_tdst-cars_predictions_lint
sns.regplot(x=cars_predictions_lini, y=residualsl, scatter=True,
fit_reg-False, data=cars)
residualsi.describe()
lin_rmsel = np.sqrt(lin_msel)
print (lin_rasel)


2_lin_testi=model_lini.score(X_test,y_test)
2_lin_trainl=model_lin1.score(X_train,y_ train)
print(r2_lin_test1,r2_lin_train1)
residualsi=y_test-cars_predictions_lin1
sns.regplot(x=cars_predictions linl, y=residuals1, scatter=True,
fit_reg=False)
residuals1.describe()
rf = RandomForestRegressor(n_estipators = 100,max_features=' auto’,
max_depth=100,min_samples_split=1¢,
min_samples_leaf=4,random_state=1)
nodel_rfl=rf.fit(X_train,y train)
cars_predictions rfl = rf.predict(X_test)
